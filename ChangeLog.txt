Change log for MT4j - Multi-Touch for Java

version 0.9 (02/23/2010):

	Input:
	* new WM_TOUCH windows 7 input source -> supporting native windows 7 touch input, registered by default if possible
	* fixed bug that didnt register an inputsource correctly in some cases
	* active input events are flushed from input sources before a scene change
	* added global input processor "CursorTracer" that shows all active touches/cursors on the screen
	* renamed ClusteringEvent->LassoEvent
	* added InertiadragAction -> allows to add inertia to dragging
	* dont automatically add the MTCanvas as a listener to all newly registered global input processors
	* completely reworked Tap&Hold Processor and event (now sends updated events with the elapsed time, we have to check if the hold was successful at gesture_ended)
	* added TapAndHoldVisualizer -> a tapandHold gesture listener which will gradually draw a circle during the tap&hold gesture
	* renamed inputcursor.getLastEvent to getCurrentEvent()
	* changed component input processors to accept only "MTFingerInput" events so that fiducial events dont trigger them
	* added "MultipleDragProcessor" component input processor that tracks all dragging fingers on a component instead of only one as in the regular dragprocessor
	* changed return value of gesturelisteners to false (indicating that the event isnt consumed, but has no real implications yet)
	* Tapprocessor doesnt check if a component is intersected at touch anymore (allows MTCanvas to be tapped)
	* most component input processors only accept input events that have a target (prevents MTCanvas' processors to get events without target)
	* when registering a global input processor it is disabled if the scene it belongs to is not the currently active scene
	* deleted packages for global input processors, put all in the same package
	* changed raw input processors to forward MTInputevent's instead of creating own Raw* events -> delete the Raw input events
	* many minor changes

	Scenes:
	* added possibility to use scene transition effects (available transitions: slide, flip, fade, blend)
	* handling of input during a scene change is now more robust
	* fixed a bug at changing scenes, where the old scene wouldnt recieve an INPUT_ENDED evt
	* added scene.destroy() that cleans it up, removes it from the application and destroys its canvas so the memory can be freed (scene has to be added to the app to be able to destroy it)
	* if changeScene() is invoked with a scene that's not in the scene list its added automatically

	Examples:
	* added MTShell example -> you can launch other scenes with it and switch between them
	* added MTGestures examples scene showing all available multi-touch gestures
	* added interactive water example
	* added Touch-Tail example
	* added Box2D physics integration and 2 physics examples -> "Airhockey" and "PhysicsScene"
	* added Scenes example that shows how to use and switch between different scenes with transition effects
	* divided examples into “basic” and "advanced" packages
	* Fiducial scene now recieves MTFiducialInputEvt events
	* changed model3d scene to be a model loading scene and made the former model3dscene into the space3D scene
	* added controls for choosing different map providers in MapsScene
	* overhauled drawing scene -> you can now use a texture brush and choose the color and width of the brush and save the picture to file
	* many minor changes

	Components:
	* added widget MTList that you can add MTListCell components to. With automatic layout, scrolling and clipping
	* added widget MTColorPicker widget to select a color
	* added widget MTOverlayContainer which is a container that tries to stay on top and isnt influenced by the scene camera -> useful for overlay controls, HUD etc
	* added widget MTSceneMenu which can be used to close and restore scene windows
	* added widget MTBackgroundImage which can display a pixel or svg image, the pixel image can also be tiled
	* added widget MTTextField which has a fixed sized, clips the text and allows no newline
	* fixed bug in MTComponent that wouldnt call destroy() on all children because the childlist would change during child destruction
	* fixed bug in BoundingSphere calculation
	* fixed and reworked PickResult class
	* fixed memory leak in MTTriangleMesh, uses less memory in general, faster loading, you can choose if you want to create default normals in constructor -> switched off for SVGs and Font -> faster!
	* changed picking in MTComponent to work with PickResult
	* added pick(int, int, boolean) in MTComponent to allow to pick components that are marked as not pickable, too
	* added method "setAnchor(..)" in MTRectangle that allows to choose the reference point for get/setposition
	* removed update() method from mtcomponent
	* reworked clipping code, you can now clip everything drawn by a component by using setClip(Clip) and use arbitrary clipping shapes
	  clipping of children of a component is done with setChildClip(Clip), 
	* removed "ChildClipMask" -> renamed and changed to "FillPaint", ChildClipMask is now "Clip"
	* removed set/isCollidable in MTComponent (not implemented atm anyway)
	* added "Itextinputlistener" to MTKeyboard and removed "ITextInputAcceptor" -> you can now add more than 1 text listener to a keyboard
	* changed MTTextarea to use 2 modes -> self expanding or fixed size with clipping -> Constructor decides
	* renamed setBoundsPickingBehaviour() -> setBoundsBehaviour() since it affects more than picking
	* changed boundsZPlaneRectangle bounding shape and arbitrary bounds to calc width/Height relative to parent/world, not from transformed local vector but from transformed bounds and then again calc bounding rect again -> width is aligned to the x, height to the y axis this way	
	* changed Geometryinfo class to only create new color buffers if not existent yet -> else update them -> no new buffers -> memory saved
	* changed appearance of MTSlider and made slider not only draggable but also clickable
	* renamed "slider" in MTSlider to "knob" -> now its slider.getKnob()
	* added check in mtcomponent if a input processor of same type is registered twice -> throws warning
	* fixed bug in MTLine that wouldnt reset the line stipple after use (thanks to Bewilderbeast)
	* renamed former MTSceneWindow to MTSceneTexture, added another MTSceneWindow class that uses a MTSceneTexture inside
	* deleted deprectated MTCircleMenu and MTCircleMenuItem
	* changed bitmapfont to use "NEAR" filtering because text was filtered too much sometimes with "LINEAR" -> of course now gets more pixelated when scaled
	* many minor changes

	Other:
	* changed use of modelloading factory to be more consistent with the other factories
	* removed some images which did belong to another app
	* fixed a bug in Animation class that always sent ANIMATION_STARTED events
	* changed timing in main loop to use System.nanoTime()
	* added ManyMouse.so to allow the use of multiple mice under linux
	* many minor changes
